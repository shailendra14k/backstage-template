apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: camel-on-openshift-template
  title: Create a Camel app for OpenShift with Developer-Hub
  description: Create a Camel app for OpenShift
  tags:
    - spring-boot
    - java
    - maven
    - tekton
    - openshift
    - argocd
spec:
  owner: shsingh
  system: microservices
  type: service

  parameters:
    - title: Provide information about the new component
      required:
        - component_id
        - repoBranchName
        - description
        - registryUrl
        - clusterDomain
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          ui:field: EntityNamePicker
          maxLength: 23
        repoBranchName:
          title: Name of the branch in the Git repository
          type: string
          default: master
        description:
          title: Description
          type: string
          default: Spring Boot App Generated by Backstage
        registryUrl:
          title: Registry URL
          type: string
          default: image-registry.openshift-image-registry.svc:5000
        clusterDomain:
          title: OpenShift Cluster Domain
          type: string
          description: Your Cluster Domain Name apps.<cluster-id>.sandbox466.opentlc.com
          default: apps.shailendra14k.in

  steps:
    - id: sourceCodeTemplate
      name: Generating the Source Code Component
      action: fetch:template
      input:
        url: ./skeleton
        values:
          appName: ${{ parameters.component_id }}
          owner: shailendra14k
          cluster: .${{ parameters.clusterDomain }}
          host: github.com
          destination: shailendra14k/${{ parameters.component_id }}
          
    - id: publish
      name: Publishing to the Source Code Repository
      action: publish:github
      input:
        allowedHosts: ['github.com']
        repoUrl: github.com?owner=shailendra14k&repo=${{ parameters.component_id }}
        repoVisibility: public

    - id: register
      name: Registering the Catalog Info Component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml

    - id: configCodeTemplate
      name: Generating the Config Code Component
      action: fetch:template
      input:
        url: ./argocd
        values:
          appName: ${{ parameters.component_id }}
          host: github.com
          registryUrl: ${{ parameters.registryUrl }}
          repoBranchName: ${{ parameters.repoBranchName }}
          cluster: .${{ parameters.clusterDomain }}
          git_owner: shailendra14k
          url: https://github.com/shailendra14k/${{parameters.component_id}}.git
          repoUrl: https://github.com/shailendra14k/${{parameters.component_id}}-config.git
        targetPath: ./gitops

    - id: publish-gitops
      name: Publishing to the Config Code Repository
      action: publish:github
      input:
       repoUrl: "github.com?owner=shailendra14k&repo=${{parameters.component_id}}-config"
       repoVisibility: public
       sourcePath: ./gitops
    
    - id: create-webhook
      name: Create GitHub Webhook
      action: github:webhook
      input:
        repoUrl: github.com?repo=${{ parameters.component_id }}&owner=shailendra14k
        webhookUrl: https://el-${{ parameters.component_id }}-${{ parameters.component_id }}.${{ parameters.clusterDomain }}

    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        appName: ${{ parameters.component_id }}-bootstrap
        argoInstance: main
        namespace: openshift-gitops
        repoUrl: https://github.com/shailendra14k/${{parameters.component_id}}-config.git
        path: 'argocd'

  output:
    links:
      - title: Open the Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open the Catalog Info Component
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}